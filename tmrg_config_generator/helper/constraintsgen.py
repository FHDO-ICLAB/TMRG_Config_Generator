import re


class ConstraintsGen:


    def __init__(self, data, divider_string="//***Voter***", suffix="V"):
        self.dict = {}
        self.constraints = {}
        self.divider_string = divider_string
        self.suffix = suffix
        # Types of fsm encoding protocols changed by Vivado
        self.fsm = ["FSM_onehot_", "FSM_sequential_", "FSM_johnson_", "FSM_gray_"]
        self.parse(data)
        self.constraints_gen()


    def add_to_dict(self, key, value):
        # Append multiple values to a key in the given dictionary
        if key not in self.dict:
            self.dict[key] = {}
        if value[0] in self.dict[key]:
            if value[1] > self.dict[key][value[0]]:
                self.dict[key][value[0]] = value[1]
        else:
            self.dict[key][value[0]] = value[1]

    def parse(self, data):
        lines = data
        for line in lines:
            key, line = line.split(', ', 1)
            # handle replicas created by vivado (e.g. fanout)
            if re.search(r"_rep.*$", line):
                continue
            # handle genvar blocks
            tmp = re.search(r"genblk\d+\[(\d+)]", line)
            if tmp and int(tmp.group(1)) > 0:
                continue
            line = line.split('/')[-1]
            value = line.rsplit('_reg', 1)
            for fsm in self.fsm:
                if fsm in value[0]:
                    value[0] = value[0].split(fsm, 1)[-1]
            print(value)
            value[1] = int(value[1][1:-2]) if value[1][1:-2].isdigit() else 0
            print(key, value)

            self.add_to_dict(key, value)

    def constraints_gen(self):
        for key in self.dict:
            self.constraints[key] = ['\n'*2 + self.divider_string + '\n' + "//This block was generated by tmrg_cfg_gen"]
            for value in self.dict[key]:
                self.constraints[key].append("//tmrg triplicate " + value)
                self.constraints[key].append("wire [" + str(self.dict[key][value]) + ":0] " + value + self.suffix + " = " + value + ';')
            self.constraints[key].append(self.divider_string + '\n'*2)

    def get_module_constraints(self, module):
        if module in self.constraints:
            return self.constraints[module]
        else:
            return []
